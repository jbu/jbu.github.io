<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on Dr James Uther</title><link>https://uther.wtf/blog/</link><description>Recent content in Blogs on Dr James Uther</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© {year}</copyright><lastBuildDate>Sun, 15 May 2022 20:56:29 +0100</lastBuildDate><atom:link href="https://uther.wtf/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Three Issues that sum up Technical Debt</title><link>https://uther.wtf/blog/three-issues-tech-debt/</link><pubDate>Sun, 15 May 2022 20:56:29 +0100</pubDate><guid>https://uther.wtf/blog/three-issues-tech-debt/</guid><description>By Dean Faulkner, Martin Robinson, and James Uther
https://www.oliverwyman.com/our-expertise/insights/2021/oct/three-issues-that-sum-up-technical-debt.html
Digital transformation often feels like a frantic race to devise more scalable, flexible, and resilient enterprise IT systems that also support innovation and keep customers happy. But when it comes to making software development decisions, the constant need to react and respond in the moment can lead to short-term thinking. One of the most common pitfalls we see is organizations struggling with &amp;ldquo;technical debt.</description></item><item><title>In Defence of Breaking Change</title><link>https://uther.wtf/blog/in-defence-of-breaking-change/</link><pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate><guid>https://uther.wtf/blog/in-defence-of-breaking-change/</guid><description>Is nuance absolutely awesome, or simply rubbish? -The news quiz, 103:2
For the purposes of this post let’s assume it’s simply rubbish.
Received wisdom is that breaking changes to supporting software (OS, libraries, services, etc) is bad. This makes intuitive sense. An API is a contract, and contracts are to be honoured.
We have SemVer to attempt to manage changes. Rich Hickey thinks that SemVer is wrong, and you should just accrete.</description></item><item><title>Nfrs Considered Harmful</title><link>https://uther.wtf/blog/nfrs-considered-harmful/</link><pubDate>Thu, 27 Aug 2020 00:00:00 +0000</pubDate><guid>https://uther.wtf/blog/nfrs-considered-harmful/</guid><description>An NFR is broadly defined as a ‘quality’ of the software, rather than what it ‘does’. So ‘the software shall add two numbers’ is a functional requirement, while ‘the software shall run within two minutes’ or ‘the software shall be maintainable’, or ‘scalable’, or whatever, is deemed ‘non-functional’. I submit that this is a dangerous distinction to make when running a software project.
In the large, everything is functional (This has been formalised into Hyrum’s Law: “With a sufficient number of users of an API, it does not matter what you promise in the contract: all observable behaviours of your system will be depended on by somebody.</description></item><item><title>Application Patterns for the Outernet</title><link>https://uther.wtf/blog/application-patterns-for-the-outernet/</link><pubDate>Tue, 29 Mar 2016 00:00:00 +0000</pubDate><guid>https://uther.wtf/blog/application-patterns-for-the-outernet/</guid><description>I’ve been meandering through the Long Earth series by Terry Pratchett (may Death be as kind to him as he was to Death) and Stephen Baxter (not met Death yet). It’s a classic alternate universe setup, where one (contemporary) day the multiple worlds theory becomes reality and people find they can ‘step’ between alternate universes. Earth is no longer just Earth, but ‘Datum’ Earth, and there are (arbitrarily) East and West earths 1.</description></item><item><title>The Life Changing Magic of Refactoring</title><link>https://uther.wtf/blog/the-life-changing-magic-of-refactoring/</link><pubDate>Fri, 30 Oct 2015 00:00:00 +0000</pubDate><guid>https://uther.wtf/blog/the-life-changing-magic-of-refactoring/</guid><description>I’m really a unix guy, but I have to admit, the whole .NET/SQLserver stack is hugely empowering. An average employee can take it, and with next to no knowledge or experience, but with a lot of determination and time, can write enough code to underpin an entire company. You start with a windows form, place a control, it generates an event handler for you, you stick in a bit of sql, and off you go, and it works!</description></item><item><title>Ga4gh</title><link>https://uther.wtf/blog/ga4gh/</link><pubDate>Tue, 11 Aug 2015 00:00:00 +0000</pubDate><guid>https://uther.wtf/blog/ga4gh/</guid><description>Gene sequencing has been diving in cost:
It’s no longer in the wild ride of 2008, but still the cost is now low enough that genome data is piling up in research centres the world over. It’s been realised that a lot of the really interesting research questions can only be answered by sampling a wide range of data from a wide range of research centres. Unfortunately, they all store the data in custom formats, with individual access policies, processes, procedures and protocols, so some of the most promising medical research is being slowed or prevented by an inability to share data.</description></item><item><title>Signal Strength</title><link>https://uther.wtf/blog/signal-strength/</link><pubDate>Thu, 09 Jul 2015 00:00:00 +0000</pubDate><guid>https://uther.wtf/blog/signal-strength/</guid><description>Another thumb-twiddling commute into the city, with only another listicle to entertain, and once again, no mobile signal. I tweet in frustration[1]:
Which received an actual reply!
Challenge accepted.
So, I have an android phone, and android can allow access to all sorts of link status information. You can add handlers to an Activity to listen to signal strength changes, cell changes, and so on. Now, I could write something myself that logs these along with the GPS location, but surely someone has already done this?</description></item><item><title>On Being Almost There</title><link>https://uther.wtf/blog/on-being-almost-there/</link><pubDate>Tue, 30 Jun 2015 00:00:00 +0000</pubDate><guid>https://uther.wtf/blog/on-being-almost-there/</guid><description>Personis is an ongoing line of research projects about how we can store personal data (thing location tracking, fitness trackers, etc) in a way that leaves us in control of our data but at the same time allows us to give permission to useful services to process that data for us. A canonical example would be something like:
In which location and activity data are co-located somewhere which gives us ownership of that data and the ability to repurpose it.</description></item><item><title>Swarming Spark</title><link>https://uther.wtf/blog/swarming-spark/</link><pubDate>Thu, 30 Apr 2015 00:00:00 +0000</pubDate><guid>https://uther.wtf/blog/swarming-spark/</guid><description>Spark is a useful bunch of stuff for processing large amounts of data, offering a friendly and fast functional interface over map-reduce on a cluster of machines, with some extra bits like cacheable datasets. It’s relatively easy to get running too (although with a list of gotchas), with scripts to start a stand-alone cluster on EC2, or pretty simple tutorials for running on mesos, and their deployment guides give a good overview of the raw process.</description></item><item><title>Lets Run Science</title><link>https://uther.wtf/blog/lets-run-science/</link><pubDate>Tue, 31 Mar 2015 00:00:00 +0000</pubDate><guid>https://uther.wtf/blog/lets-run-science/</guid><description>In our last jaunt, we had a look at code that take all the various measurements of temperature that have been taken over the last few hundred years, and pull them together into something we can usefully run stats on. The headline finding of all this is that on average, the planet has warmed over time. But why? To answer that, we need a model to play with.
A climate model (or general circulation model) attempts to model the physical processes of the earths climate.</description></item><item><title>Lets Run Science Part Iota</title><link>https://uther.wtf/blog/lets-run-science-part-iota/</link><pubDate>Tue, 31 Mar 2015 00:00:00 +0000</pubDate><guid>https://uther.wtf/blog/lets-run-science-part-iota/</guid><description>In our last jaunt, we had a look at code that take all the various measurements of temperature that have been taken over the last few hundred years, and pull them together into something we can usefully run stats on. The headline finding of all this is that on average, the planet has warmed over time. But why? To answer that, we need a model to play with.
A climate model (or general circulation model) attempts to model the physical processes of the earths climate.</description></item><item><title>Playing with open NHS data, and a rant</title><link>https://uther.wtf/blog/open-nhs-data/</link><pubDate>Wed, 24 Dec 2014 00:00:00 +0000</pubDate><guid>https://uther.wtf/blog/open-nhs-data/</guid><description>Open Data™ is being pushed quite heavily by the powers that be, which is mostly a good thing because It’s useful information that I want to use, and I’ve already paid taxes for it. Also, this is a democracy dammit. Can Haz Sunlight!. The NHS is part of this. For most of this post we will look at the published sets of prescription data, but see below. And we’re going to look at how to use some open information about U.</description></item><item><title>Codemesh Day 1</title><link>https://uther.wtf/blog/codemesh-day-1/</link><pubDate>Fri, 28 Nov 2014 00:00:00 +0000</pubDate><guid>https://uther.wtf/blog/codemesh-day-1/</guid><description>I was at day 1 of CodeMesh this year (you can see Tim’s report on day 2 here). A quick recap:
QOTD: There are 3 fire exits as marked, but we’re confident that Erlang programmers who die will be restarted.
Keynote: complexity is outside the code Jessica Kerr &amp;amp; Dan North A good, entertaining talk that covered a lot of ground (and thankfully, someone else has a gist of better notes, so you can read them), But my main takeaways were:</description></item><item><title>Expanding Reducers</title><link>https://uther.wtf/blog/expanding-reducers/</link><pubDate>Wed, 31 Jul 2013 00:00:00 +0000</pubDate><guid>https://uther.wtf/blog/expanding-reducers/</guid><description>When playing with a new bit of language, it can be helpful to restrict the problem space to an old, well understood algorithm. For me at least, learning one thing at a time is easier! For this post, It’ll be prime sieves, and I’ll be exploring clojure reducers.
A quick recap, the sieve of eratosthenes is a not-maximally-non-optimal way of finding primes. It’s usually expressed as follows:
To find primes below n: generate a list of n integers greater than 1</description></item></channel></rss>